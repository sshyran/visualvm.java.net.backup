<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../Licenses/license-${project.license}.txt">

package ${PACKAGENAME};

import com.sun.tools.visualvm.application.Application;
import com.sun.tools.visualvm.core.datasource.DataSource;
import com.sun.tools.visualvm.core.snapshot.Snapshot;
import com.sun.tools.visualvm.core.ui.DataSourceView;
import com.sun.tools.visualvm.core.ui.DataSourceViewProvider;
import com.sun.tools.visualvm.core.ui.DataSourceViewsManager;
import com.sun.tools.visualvm.core.ui.PluggableDataSourceViewProvider;
import com.sun.tools.visualvm.coredump.CoreDump;
import com.sun.tools.visualvm.heapdump.HeapDump;
import com.sun.tools.visualvm.host.Host;
import com.sun.tools.visualvm.threaddump.ThreadDump;
import java.util.Set;

public class ${TEMPLATENAME}ViewProvider extends PluggableDataSourceViewProvider<${DISPLAYNAME}> {

    private static DataSourceViewProvider<${DISPLAYNAME}> instance = new ${TEMPLATENAME}ViewProvider();

    @Override
    public boolean supportsViewFor(${DISPLAYNAME} My${DISPLAYNAME}) {
        //Always shown:
        return true;
    }

    @Override
    public synchronized DataSourceView createView(final ${DISPLAYNAME} My${DISPLAYNAME}) {
        return new ${TEMPLATENAME}View(My${DISPLAYNAME}) ;
    }
   
    static void initialize() {
        DataSourceViewsManager.sharedInstance().addViewProvider(instance, ${DISPLAYNAME}.class);
    }

    static void unregister() {
        DataSourceViewsManager.sharedInstance().removeViewProvider(instance);
    }

    @Override
    public Set<Integer> getPluggableLocations(DataSourceView arg0) {
        return ALL_LOCATIONS;
    }

}

