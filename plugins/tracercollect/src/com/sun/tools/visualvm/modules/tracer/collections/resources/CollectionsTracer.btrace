package com.sun.tools.visualvm.modules.tracer.collections.resources;

import com.sun.btrace.Profiler;
import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;

@BTrace(name="CollectionsStats") public class CollectionsTracer {
    // <fragment name="sorting">
    @Property(name="sortingProfiler") private static Profiler sortingProfiler = Profiling.newProfiler(2);

    @OnMethod(
        clazz="java.util.Collections",
        method="/sort/"
    )
    public static void collectionsSortBefore() {
        Profiling.recordEntry(sortingProfiler, "Collections.sort");
    }

    @OnMethod(
        clazz="java.util.Collections",
        method="/sort/",
        location=@Location(Kind.RETURN)
    )
    public static void collectionsSortAfter(@Duration long time) {
        Profiling.recordExit(sortingProfiler, "Collections.sort", time);
    }

    @OnMethod(
        clazz="java.util.Arrays",
        method="/sort/"
    )
    public static void arraysSortBefore() {
        Profiling.recordEntry(sortingProfiler, "Arrays.sort");
    }

    @OnMethod(
        clazz="java.util.Arrays",
        method="/sort/",
        location=@Location(Kind.RETURN)
    )
    public static void arraysSortAfter(@Duration long time) {
        Profiling.recordExit(sortingProfiler, "Arrays.sort", time);
    }
    // </fragment>

    // <fragment name="conversions">
    @Property(name="conversionsProfiler") private static Profiler conversionsProfiler = Profiling.newProfiler(4);

    @OnMethod(
        clazz="+java.util.Set",
        method="/toArray/"
    )
    public static void setToArrayBefore() {
        Profiling.recordEntry(conversionsProfiler, "Set.toArray");
    }

    @OnMethod(
        clazz="+java.util.Set",
        method="/toArray/",
        location=@Location(Kind.RETURN)
    )
    public static void setToArrayAfter(@Duration long time) {
        Profiling.recordExit(conversionsProfiler, "Set.toArray", time);
    }

    @OnMethod(
        clazz="+java.util.List",
        method="/toArray/"
    )
    public static void listToArrayBefore() {
        Profiling.recordEntry(conversionsProfiler, "List.toArray");
    }

    @OnMethod(
        clazz="+java.util.List",
        method="/toArray/",
        location=@Location(Kind.RETURN)
    )
    public static void listToArrayAfter(@Duration long time) {
        Profiling.recordExit(conversionsProfiler, "List.toArray", time);
    }

    @OnMethod(
        clazz="+java.util.Queue",
        method="/toArray/"
    )
    public static void queueToArrayBefore() {
        Profiling.recordEntry(conversionsProfiler, "Queue.toArray");
    }

    @OnMethod(
        clazz="+java.util.Queue",
        method="/toArray/",
        location=@Location(Kind.RETURN)
    )
    public static void queueToArrayAfter(@Duration long time) {
        Profiling.recordExit(conversionsProfiler, "List.Queue", time);
    }

    @OnMethod(
        clazz="java.util.Arrays",
        method="/asList/"
    )
    public static void arraysAsListBefore() {
        Profiling.recordEntry(conversionsProfiler, "Arrays.asList");
    }

    @OnMethod(
        clazz="java.util.Arrays",
        method="/asList/",
        location=@Location(Kind.RETURN)
    )
    public static void arraysAsListAfter(@Duration long time) {
        Profiling.recordExit(conversionsProfiler, "Arrays.asList", time);
    }
    // </fragment>

    @OnTimer(1000)
    public static void updateMBeans() {
        // <fragment name="sorting">
        Profiling.snapshotAndReset(sortingProfiler);
        // </fragment>

        // <fragment name="conversions">
        Profiling.snapshotAndReset(conversionsProfiler);
        // </fragment>
    }
}