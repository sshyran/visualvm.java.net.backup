package net.java.btrace.visualvm.tracer.j2se.resources;

import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;

@BTrace(name="AWTStats") public class AWTTracer {
    // <fragment name="utilization">
    private static long lastTimeStamp = -1L;
    private static long timeInEDT = 0;
    private static long timeInPaint = 0;
    private static long timeInLayout = 0;

    @Property volatile private static int dispatch = 0;
    @Property volatile private static int paint = 0;
    @Property volatile private static int layout = 0;

    @TLS private static int handlerDepth = 0;

    @OnMethod(
        clazz="java.awt.EventQueue",
        method="dispatchEvent"
    )
    public static void onDispatchEnter() {
        handlerDepth++;
    }

    @OnMethod(
        clazz="java.awt.EventQueue",
        method="dispatchEvent",
        location=@Location(value=Kind.RETURN)
    )
    public static void onDispatchExit(@Duration long time) {
        if (--handlerDepth == 0) {
            timeInEDT += time;
        }
    }

    @OnMethod(
        clazz="javax.swing.RepaintManager",
        method="paint",
        location=@Location(value=Kind.RETURN)
    )
    public static void onPaint(@Duration long time) {
        timeInPaint += time;
    }

    @OnMethod(
        clazz="+java.awt.LayoutManager",
        method="layoutContainer",
        location=@Location(value=Kind.RETURN)
    )
    public static void onLayout(@Duration long time) {
        timeInLayout += time;
    }
    // </fragment>

    @OnTimer(value=1000)
    public static void calcRates() {
        // <fragment name="utilization">
        long inLayout = timeInLayout;
        long inPaint = timeInPaint;
        long edt = timeInEDT;
        timeInLayout = 0;
        timeInPaint = 0;
        timeInEDT = 0;
        // </fragment>
        long timeStamp = timeMillis();
        long span = lastTimeStamp > -1 ? timeStamp - lastTimeStamp : 1000;
        lastTimeStamp = timeStamp;

        long divider = span * 1000L; // nanoseconds in 1 millisecond * 100 (as %)

        // <fragment name="utilization">
        dispatch = (int)(edt / divider);
        paint = (int)(inPaint / divider);
        layout = (int)(inLayout / divider);
        // </fragment>
    }
}