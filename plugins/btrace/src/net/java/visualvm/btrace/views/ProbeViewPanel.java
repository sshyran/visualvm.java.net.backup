/*
 * ProbeViewPanel.java
 *
 * Created on February 22, 2008, 11:47 AM
 */
package net.java.visualvm.btrace.views;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingUtilities;

/**
 *
 * @author  Jaroslav Bachorik
 */
public class ProbeViewPanel extends javax.swing.JPanel {

    final static private ScheduledExecutorService probeOutputReader = Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors());
    private ScheduledFuture scheduled = null;

    /** Creates new form ProbeViewPanel */
    public ProbeViewPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        consoleOutput = new net.java.visualvm.btrace.utils.HTMLTextArea();

        jScrollPane1.setViewportView(consoleOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.java.visualvm.btrace.utils.HTMLTextArea consoleOutput;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public void setInputStream(final InputStream input) {
        if (input == null && scheduled != null) {
            scheduled.cancel(false);
            scheduled = null;
            return;
        }
        final BufferedReader br = new BufferedReader(new InputStreamReader(input));
        
        scheduled = probeOutputReader.scheduleWithFixedDelay(new Runnable() {
            private StringBuilder outputText = new StringBuilder();
            public void run() {
                try {
                    final String newLine = transform(htmlize(br.readLine()));
                    if (newLine == null || newLine.length() == 0) return;
                    
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            outputText.append(newLine);
                            consoleOutput.setText("<html>".concat(outputText.toString()).concat("</html>"));

                            // Make sure the last line is always visible
                            consoleOutput.setCaretPosition(consoleOutput.getDocument().getLength());
                        }
                    });
                } catch (IOException e) {
                    scheduled.cancel(false);
                    e.printStackTrace();
                }
            }
        }, 100, 200, TimeUnit.MILLISECONDS);
    }

    private static String htmlize(String value) {
        if (value == null) return null;
        return value.replace("&", "&amp;").replace("<", "&lt;");
    }

    private static String transform(String value) {
        if (value == null) return null;
        StringBuilder sb = new StringBuilder();
        String[] result = value.split("\\n");
        for (int i = 0; i < result.length; i++) {
            String line = result[i];
            if (line.isEmpty()) {
                sb.append("<span>" + line + "\n</span>");
            } else if (line.substring(0, 1).matches("\\s")) {
                sb.append("<span style=\"color: #CC3300\">" + line + "\n</span>");
            } else {
                sb.append("<span style=\"color: #0033CC\">" + line + "\n</span>");
            }
        }
        return sb.toString();
    }
}
