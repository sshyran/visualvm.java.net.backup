LBL_Root_Classes=\u3010Start profiling from classes:\u3011
LBL_Profiling_results=\u3010Profiling results\u3011
MSG_Profiler_Snapshots=\u3010Profiler Snapshots\u3011
MSG_Opening_snapshot_failed.=\u3010Opening snapshot failed.\u3011
MSG_Opening_Profiler_Snapshot=\u3010Opening Profiler Snapshot...\u3011
LBL_Cpu_settings=\u3010CPU settings\u3011
LBL_Record_Stacktraces=\u3010Record allocations stack traces\u3011
MSG_Compare_Snapshots=\u3010&Compare\u3011
LBL_Status=\u3010Status:\u3011
LBL_Snapshots_Comparison=\u3010Snapshots Comparison\u3011
MSG_Class_Sharing_Nolink=\u3010<nobr>https://visualvm.dev.java.net/troubleshooting.html#xshare</nobr>\u3011
MSG_Not_Comparable=<html>\u3010<b>Selected snapshots are not comparable.</b><br><br>Check snapshots type and settings.\u3011</html>
TOOLTIP_Instrumentation_Filter=<html>\u3010<code><b>org.mypackage.&nbsp;</b></code> defines only the package code<br><code><b>org.mypackage.*</b></code> defines the package and all subpackages<br><br><b>Empty text</b> defines all packages<html>\u3011
LBL_Profile_Incl=\u3010Profile only classes:\u3011
LBL_Profile_AllocationsGC=\u3010Profile object allocations and GC\u3011
LBL_Memory_settings=\u3010Memory settings\u3011
MSG_refreshing=\u3010refreshing...\u3011
MSG_in_progress=\u3010</a> in progress</nobr>\u3011
MSG_application_terminated=\u3010application terminated\u3011
MSG_profiling_of=\u3010<nobr>profiling of <a href='#'>\u3011
LBL_Profiler=\u3010Profiler\u3011
MSG_Save_Profiler_Snapshot_As=\u3010Save Profiler Snapshot As\u3011
TOOLTIP_Track_Every=\u3010Only every n-th object is tracked to reduce profiling overhead. Total number of allocated objects is not affected.\u3011
MSG_Incorrect_CPU_settings=\u3010Incorrect CPU settings specified.\u3011
MSG_profiling_stopped=\u3010profiling stopped\u3011
DESCR_Profile=\u3010Profile\u3011
LBL_Profile_Excl=\u3010Do not profile classes:\u3011
LBL_Settings=\u3010Settings\u3011
TOOLTIP_Allocations=\u3010Only object allocations are recorded\u3011
TOOLTIP_Inclusive_Filter=\u3010Only code of these packages will be profiled\u3011
MSG_profiling_running_classes_N=\u3010profiling running ({0} classes instrumented, tracking each {1}th object)\u3011
OpenIDE-Module-Name=\u3010VisualVM-Profiler\u3011
MSG_profiling_running_methods=\u3010profiling running ({0} methods instrumented)\u3011
DESCR_Compare_Snapshots=\u3010Compare profiler snapshots\u3011
MSG_Profiler_Snapshot=\u3010Pro&filer Snapshot\u3011
LBL_Stop=\u3010Stop\u3011
MSG_Profile=\u3010&Profile\u3011
LBL_Memory=\u3010Memory\u3011
LBL_Profile_Runnables=\u3010Profile new Runnables\u3011
MSG_profiling_started=\u3010profiling started\u3011
MSG_Class_Sharing_Link=\u3010<a href="https://visualvm.dev.java.net/troubleshooting.html#xshare">https://visualvm.dev.java.net/troubleshooting.html#xshare</a>\u3011
LBL_Run_GC=\u3010Run GC when getting results\u3011
MSG_profiling_inactive=\u3010profiling inactive\u3011
TOOLTIP_Stack_Traces=\u3010Information about methods allocating the objects is collected\u3011
TOOLTIP_Root_Classes=<html>\u3010Profiling will start when code of these classes is invoked:<br><br><code><b>org.mypackage.**</b></code> defines all classes in the package and all subpackages<br><code><b>org.mypackage.*&nbsp;</b></code> defines all classes in the package<br><code><b>org.mypackage.MyClass</b></code> defines only <code>MyClass</code><br><br><b>Empty text</b> defines all classes\u3011</html>
MSG_Exclude_Java_Core_Classes=\u3010Exclude Java Core Classes\u3011
TOOLTIP_Exclusive_Filter=\u3010All code except these packages will be profiled\u3011
LBL_Restore_Defaults=\u3010Restore Defaults\u3011
DESCR_Snapshots_Comparison=\u3010Profiler Snapshots Comparison: {0} compared to {1}\u3011
MSG_profiling_running_classes_3=\u3010profiling running ({0} classes instrumented, tracking each 3rd object)\u3011
MSG_profiling_running_classes_2=\u3010profiling running ({0} classes instrumented, tracking each 2nd object)\u3011
MSG_profiling_running_classes_1=\u3010profiling running ({0} classes instrumented, tracking each object)\u3011
LBL_Profile=\u3010Profile:\u3011
MSG_profiling_paused=\u3010profiling paused\u3011
TOOLTIP_Allocations_GC=\u3010Whole lifecycle of allocated objects is recorded\u3011
MSG_Calibration=<html>\u3010<b>Calibration will be performed.</b><br><br>Profiler will perform initial JDK calibration. Please make sure that other applications<br>are not placing a noticeable load on your machine at this time and click the OK button.\u3011</html>
MSG_Profiling_results=\u3010Profiling results\u3011
TOOLTIP_New_Runnables=\u3010Classes invoked from new Threads or Runnables are automatically instrumented\u3011
LBL_Cpu=\u3010CPU\u3011
LBL_Profile_Allocations=\u3010Profile object allocations\u3011
LBL_Track_Every2=\u3010object allocations\u3011
LBL_Track_Every1=\u3010Track every\u3011
MSG_calibration_progress=\u3010calibration in progress...\u3011
MSG_Class_Sharing=\u3010<b>WARNING!</b> Class sharing is enabled for this JVM. This can cause problems when profiling the application and eventually may crash it. Please see the Troubleshooting guide for more information and steps to fix the problem: {0}.\u3011
DESCR_Profiler_Snapshot=\u3010Profiler Snapshot\u3011
